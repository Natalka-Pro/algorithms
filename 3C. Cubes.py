"""
Аня и Боря любят играть в разноцветные кубики, причем у каждого из них свой набор
и в каждом наборе все кубики различны по цвету. Однажды дети заинтересовались, сколько
существуют цветов таких, что кубики каждого цвета присутствуют в обоих наборах.
Для этого они занумеровали все цвета случайными числами. На этом их энтузиазм иссяк,
поэтому вам предлагается помочь им в оставшейся части. Номер любого цвета — это
целое число в пределах от 0 до 109.

Формат ввода
В первой строке входного файла записаны числа N и M — количество кубиков у Ани и
Бори соответственно. В следующих N строках заданы номера цветов кубиков Ани. В последних
M строках номера цветов кубиков Бори.

Формат вывода
Выведите сначала количество, а затем отсортированные по возрастанию номера цветов
таких, что кубики каждого цвета есть в обоих наборах, затем количество и отсортированные
по возрастанию номера остальных цветов у Ани, потом количество и отсортированные
по возрастанию номера остальных цветов у Бори.

Пример 1
Ввод
Вывод
4 3
0
1
10
9
1
3
0

2
0 1
2
9 10
1
3

Пример 2
Ввод
Вывод
2 2
1
2
2
3

1
2
1
1
1
3

Пример 3
Ввод
Вывод
0 0

0
0
0
"""


def fun(s1, s2):
    """
    >>> fun([0, 1, 10, 9], [1, 3, 0])
    ([0, 1], [9, 10], [3])
    >>> fun([1, 2], [2, 3])
    ([2], [1], [3])
    >>> fun([], [])
    ([], [], [])
    """
    s1 = set(s1)
    s2 = set(s2)
    ans1 = s1 & s2
    ans2 = s1 - s2
    ans3 = s2 - s1
    return sorted(ans1), sorted(ans2), sorted(ans3)


N, M = map(int, input().split())
s1 = [int(input()) for i in range(N)]
s2 = [int(input()) for i in range(M)]
ans = fun(s1, s2)

for i in ans:
    print(len(i))
    print(*i)

# print(f">>> fun({s1}, {s2})")
# print(f"{fun(s1, s2)}")

if __name__ == "__main__":
    import doctest

    doctest.testmod()
