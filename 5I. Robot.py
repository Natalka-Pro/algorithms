"""
Студенты одного из вузов спроектировали робота для частичной автоматизации процесса
сборки авиационного двигателя.
В процессе сборки двигателя могут встречаться операции 26 типов, которые обозначаются
строчными буквами латинского алфавита. Процесс сборки состоит из N операций.
Предполагается использовать робота один раз для выполнения части подряд идущих операций
из процесса сборки.
Память робота состоит из K ячеек, каждая из которых содержит одну операцию. Операции
выполняются последовательно, начиная с первой, в том порядке, в котором они расположены
в памяти. Выполнив последнюю из них, робот продолжает работу с первой. Робота можно
остановить после любой операции. Использование робота экономически целесообразно,
если он выполнит хотя бы K + 1 операцию.
Требуется написать программу, которая по заданному процессу сборки определит количество
экономически целесообразных способов использования робота.

Формат ввода
В первой строке входного файла записано число K > 0 — количество операций, которые
можно записать в память робота.
Вторая строка состоит из N > K строчных латинских букв, обозначающих операции —
процесс сборки двигателя. Операции одного и того же типа обозначаются одной и той
же буквой. N ≤ 200000

Формат вывода
Выходной файл должен содержать единственное целое число — количество экономически
целесообразных способов использования робота.

Пример 1
Ввод
Вывод
2
zabacabab

5

Пример 2
Ввод
Вывод
2
abc

0
"""


def fun(s, K):
    """
    TL - 26 test

    >>> fun('zabacabab', 2)
    5
    >>> fun('abc', 2)
    0
    >>> fun('abcabcac', 3)
    10
    """

    ans = 0
    for left in range(len(s) - K):
        right = left + K

        while right < len(s) and s[right - K] == s[right]:
            # print(left, right, ans)
            right += 1
            ans += 1

        # print(left, right, ans)

    return ans


K = int(input())
s = input()
print(fun(s, K))


# def str2fstr(s):
#     ans = []
#     for i in s:
#         if i.isalpha():
#             ans.append(f"{{{i}}}")
#         else:
#             ans.append(i)
#     return "".join(ans)


# q = "s, K"
# print(f"fun({q})\n>>> fun({str2fstr(q)})")


# print(f">>> fun('{s}', {K})")
# print(f"    {fun(s, K)}")


if __name__ == "__main__":
    import doctest

    doctest.testmod()
