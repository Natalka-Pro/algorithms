"""
Городская площадь имеет размер n×m и покрыта квадратной плиткой размером 1×1.
При плановой замене плитки выяснилось, что новой плитки недостаточно для покрытия
всей площади, поэтому было решено покрыть плиткой только дорожку по краю площади,
а в центре площади разбить прямоугольную клумбу (см. рисунок к примеру). При этом
дорожка должна иметь одинаковую ширину по всем сторонам площади. Определите максимальную
ширину дорожки, которую можно выложить из имеющихся плиток.

Формат ввода
Первая и вторая строки входных данных содержат по одному числу n и m
(3≤ n ≤ 2×109, 3≤ m ≤ 2×109) — размеры площади.
Третья строка содержит количество имеющихся плиток t, 1≤ t< nm.
Обратите внимание, что значение t может быть больше, чем возможное значение 32-битной
целочисленной переменной, поэтому необходимо использовать 64-битные числа (тип int64
в языке Pascal, тип long long в C и C++, тип long в Java и C#).

Формат вывода
Программа должна вывести единственное число — максимальную ширину дорожки, которую
можно выложить из имеющихся плиток.

Пример
Ввод
Вывод
6
7
38

2

Примечания
Пояснение к примеру. Площадь имеет размеры 6×7, из 38 плиток можно выложить дорожку
шириной в 2 плитки.
"""


def check(d, params):
    n, m, t = params

    a = max(n - 2 * d, 0)
    b = max(m - 2 * d, 0)

    req = m * n - a * b

    return req <= t


def rfind(l, r, params):
    while l < r:
        m = (l + r + 1) // 2
        if check(m, params):
            l = m
        else:
            r = m - 1

    return l


def fun(n, m, t):
    """
    >>> fun(6, 7, 38)
    2
    """

    return rfind(0, max(n, m), (n, m, t))


n, m, t = [int(input()) for _ in range(3)]
print(fun(n, m, t))


# def str2fstr(s):
#     ans = []
#     for i in s:
#         if i.isalpha():
#             ans.append(f"{{}}")
#         else:
#             ans.append(i)
#     return "".join(ans)


# print(f">>> fun({str2fstr('n, m, t')})".format(n, m, t))
# print(f"    {fun(n, m, t)}")


if __name__ == "__main__":
    import doctest

    doctest.testmod()
