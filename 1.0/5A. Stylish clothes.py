"""
Глеб обожает шоппинг. Как-то раз он загорелся идеей подобрать себе майку и штаны
так, чтобы выглядеть в них максимально стильно. В понимании Глеба стильность одежды
тем больше, чем меньше разница в цвете элементов его одежды.
В наличии имеется N (1 ≤ N ≤ 100 000) маек и M (1 ≤ M ≤ 100 000) штанов, про каждый
элемент известен его цвет (целое число от 1 до 10 000 000). Помогите Глебу выбрать
одну майку и одни штаны так, чтобы разница в их цвете была как можно меньше.

Формат ввода
Сначала вводится информация о майках: в первой строке целое число N (1 ≤ N ≤ 100 000)
и во второй N целых чисел от 1 до 10 000 000 — цвета имеющихся в наличии маек. Гарантируется,
что номера цветов идут в возрастающем порядке (в частности, цвета никаких двух маек
не совпадают).
Далее в том же формате идёт описание штанов: их количество M (1 ≤ M ≤ 100 000) и
в следующей строке M целых чисел от 1 до 10 000 000 в возрастающем порядке — цвета
штанов.

Формат вывода
Выведите пару неотрицательных чисел — цвет майки и цвет штанов, которые следует
выбрать Глебу. Если вариантов выбора несколько, выведите любой из них.

Пример 1
Ввод
Вывод
2
3 4
3
1 2 3

3 3

Пример 2
Ввод
Вывод
2
4 5
3
1 2 3

4 3

Пример 3
Ввод
Вывод
5
1 2 3 4 5
5
1 2 3 4 5

1 1
"""


def fun(m, s):
    """
    >>> fun([3, 4], [1, 2, 3])
    (3, 3)
    >>> fun([4, 5], [1, 2, 3])
    (4, 3)
    >>> fun([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])
    (1, 1)
    >>> fun([10, 20, 30, 40], [2, 15, 25, 31, 42])
    (30, 31)
    """

    m_index = s_index = 0
    min_dist = max(m) + max(s)
    ans = m[0], s[0]

    while m_index < len(m) and s_index < len(s):
        dist = abs(m[m_index] - s[s_index])
        if dist < min_dist:
            min_dist = dist
            ans = m[m_index], s[s_index]

        if m[m_index] < s[s_index]:
            m_index += 1
        else:
            s_index += 1

    return ans


_ = int(input())
m = list(map(int, input().split()))
_ = int(input())
s = list(map(int, input().split()))
print(*fun(m, s))

# print(f">>> fun({m}, {s})")
# print(f"{fun(m, s)}")

if __name__ == "__main__":
    import doctest

    doctest.testmod()
