"""
Вам необходимо построить поле для игры "Сапер" по его конфигурации – размерам и
координатам расставленных на нем мин.
Вкратце напомним правила построения поля для игры "Сапер":
    Поле состоит из клеток с минами и пустых клеток
    Клетки с миной обозначаются символом *
    Пустые клетки содержат число k_i,j, 0 ≤ k_i,j ≤ 8 – количество мин на соседних клетках.
Соседними клетками являются восемь клеток, имеющих смежный угол или сторону.

Формат ввода
В первой строке содержатся три числа: N, 1 ≤ N ≤ 100 - количество строк на поле,
M, 1 ≤ M ≤ 100 - количество столбцов на поле, K, 0 ≤ K ≤ N ⋅ M - количество мин
на поле.
В следующих K строках содержатся по два числа с координатами мин: p, 1 ≤ p ≤ N -
номер строки мины, q, 1 ≤ q ≤ M - номер столбца мины.

Формат вывода
Выведите построенное поле, разделяя строки поля переводом строки, а столбцы - пробелом.

Пример 1
Ввод
Вывод
3 2 2
1 1
2 2

* 2
2 *
1 1

Пример 2
Ввод
Вывод
2 2 0

0 0
0 0

Пример 3
Ввод
Вывод
4 4 4
1 3
2 1
4 2
4 4

1 2 * 1
* 2 1 1
2 2 2 1
1 * 2 *
"""


def IsOnField(x, y, N, M):
    return (0 <= x < M) and (0 <= y < N)


def neighbors(x, y, N, M):
    """
    >>> neighbors(0, 0, 2, 2)
    [(1, 0), (1, 1), (0, 1)]
    >>> neighbors(1, 1, 3, 3)
    [(1, 0), (2, 0), (2, 1), (2, 2), (1, 2), (0, 2), (0, 1), (0, 0)]
    """
    sys = [
        (x, y - 1),
        (x + 1, y - 1),
        (x + 1, y),
        (x + 1, y + 1),
        (x, y + 1),
        (x - 1, y + 1),
        (x - 1, y),
        (x - 1, y - 1),
    ]

    return [i for i in sys if IsOnField(*i, N, M)]


def fun(N, M, s):
    """
    >>> fun(3, 2, [[1, 1], [2, 2]])
    [['*', 2], [2, '*'], [1, 1]]
    >>> fun(2, 2, [])
    [[0, 0], [0, 0]]
    >>> fun(4, 4, [[1, 3], [2, 1], [4, 2], [4, 4]])
    [[1, 2, '*', 1], ['*', 2, 1, 1], [2, 2, 2, 1], [1, '*', 2, '*']]
    """
    ans = [[0] * M for _ in range(N)]

    for i in s:
        x, y = map(lambda x: x - 1, i)
        cells = neighbors(x, y, M, N)

        for x, y in cells:
            ans[x][y] += 1

    for i in s:
        x, y = map(lambda x: x - 1, i)
        ans[x][y] = "*"

    return ans


def print_matrix(m):
    for i in m:
        print(*i)


N, M, K = map(int, input().split())
s = [list(map(int, input().split())) for _ in range(K)]

print_matrix(fun(N, M, s))

if __name__ == "__main__":
    import doctest

    doctest.testmod()
