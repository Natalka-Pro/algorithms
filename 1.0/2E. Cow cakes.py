"""
Ежегодный турнир «Веселый коровяк» — по метанию коровьих лепешек на дальность —
прошел 8–9 июля в селе Крылово Осинского района Пермского края.
Участники соревнований кидают «снаряд» — спрессованный навоз, выбирая его из заранее
заготовленной кучи. Желающих поупражняться в силе броска традиционно очень много
— как мужчин, так и женщин. Каждую лепешку, которую метнули участники «Веселого
коровяка», внимательно осматривали женщины в костюмах коров и тщательно замеряли
расстояние.
Соревнования по метанию коровьих лепешек проводятся в Пермском крае с 2009 года.
К сожалению, после чемпионата потерялись записи с фамилиями участников, остались
только записи о длине броска в том порядке, в котором их совершали участники.
Трактиорист Василий помнит три факта:
1) Число метров, на которое он метнул лепешку, оканчивалось на 5
2) Один из победителей чемпионата метал лепешку до Василия
3) Участник, метавший лепешку сразу после Василия, метнул ее на меньшее количество
метров
Будем считать, что участник соревнования занял k-е место, если ровно (k − 1) участников
чемпионата метнули лепешку строго дальше, чем он.
Какое максимально высокое место мог занять Василий?

Формат ввода
Первая строка входного файла содержит целое число n — количество участников чемпионата
по метанию лепешек (3 ≤ n ≤ 105).
Вторая строка входного файла содержит n положительных целых чисел, каждое из которых
не превышает 1000, — дальность броска участников чемпионата, приведенные в том порядке,
в котором происходило метание.

Формат вывода
Выведите самое высокое место, которое мог занять тракторист Василий. Если не существует
ни одного участника чемпионата, который удовлетворяет, описанным выше условиям,
выведите число 0.

Пример 1
Ввод
Вывод
7
10 20 15 10 30 5 1

6

Пример 2
Ввод
Вывод
3
15 15 10

1

Пример 3
Ввод
Вывод
3
10 15 20

0
"""


def fun(s):
    """
    >>> fun([10, 20, 15, 10, 30, 5, 1])
    6
    >>> fun([15, 15, 10])
    1
    >>> fun([10, 15, 20])
    0
    >>> fun([10, 15, 20, 19, 20, 15, 10])
    4
    >>> fun([40, 15, 5, 39, 55, 35, 25, 15, 5])
    4
    """
    sus = 0
    cur_max = s[0]

    for i in range(1, len(s) - 1):
        if s[i] > cur_max:
            cur_max = s[i]
            sus = 0

        elif s[i] % 10 == 5 and s[i + 1] < s[i] and s[i] > sus:
            sus = s[i]

    if sus == 0:
        return 0

    # определение места для подозрительного значения
    places = 1
    # print(sus)

    for elem in s:
        if elem > sus:
            places += 1

    return places


def fun1(s):
    """
    TL - 14 test

    >>> fun1([10, 20, 15, 10, 30, 5, 1])
    6
    >>> fun1([15, 15, 10])
    1
    >>> fun1([10, 15, 20])
    0
    >>> fun1([10, 15, 20, 19, 20, 15, 10])
    4
    >>> fun1([40, 15, 5, 39, 55, 35, 25, 15, 5])
    4
    """
    sus = []
    cur_max = s[0]
    for i in range(1, len(s) - 1):
        if s[i] > cur_max:
            cur_max = s[i]
            sus = []
            continue

        if s[i] % 10 == 5 and s[i + 1] < s[i]:
            sus.append(s[i])

    if len(sus) == 0:
        return 0

    # определение места для каждого подозрительного значения
    places = [1] * len(sus)
    # print(sus)

    for i in range(len(places)):
        for elem in s:
            if elem > sus[i]:
                places[i] += 1

    return min(places)


def fun2(s):
    """
    TL - 14 test

    >>> fun2([10, 20, 15, 10, 30, 5, 1])
    6
    >>> fun2([15, 15, 10])
    1
    >>> fun2([10, 15, 20])
    0
    >>> fun2([10, 15, 20, 19, 20, 15, 10])
    4
    >>> fun2([40, 15, 5, 39, 55, 35, 25, 15, 5])
    4
    """
    val2places = {}

    for val in s:
        if val not in val2places:
            val2places[val] = 1

            for i in s:
                if i > val:
                    val2places[val] += 1

    for i, val in enumerate(s):
        if val2places[val] == 1:
            idx_max = i
            break

    place_vasiliy = []

    for i in range(1, len(s) - 1):
        if s[i] % 10 == 5 and s[i + 1] < s[i] and idx_max < i:
            place_vasiliy.append(val2places[s[i]])

    # print(val2places, place_vasiliy)
    if len(place_vasiliy) == 0:
        return 0

    return min(place_vasiliy)


n, s = int(input()), list(map(int, input().split()))
print(fun(s))
# print(fun2(s))

if __name__ == "__main__":
    import doctest

    doctest.testmod()
