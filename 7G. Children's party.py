"""
Организаторы детского праздника планируют надуть для него M воздушных шариков. С
этой целью они пригласили N добровольных помощников, i-й среди которых надувает
шарик за Ti минут, однако каждый раз после надувания Zi шариков устает и отдыхает
Yi минут. Теперь организаторы праздника хотят узнать, через какое время будут надуты
все шарики при наиболее оптимальной работе помощников, и сколько шариков надует
каждый из них. (Если помощник надул шарик, и должен отдохнуть, но больше шариков
ему надувать не придется, то считается, что он закончил работу сразу после окончания
надувания последнего шарика, а не после отдыха).

Формат ввода
В первой строке входных данных задаются числа M и N (0 ≤ M ≤ 15000, 1 ≤ N ≤ 1000).
Следующие N строк содержат по три целых числа - Ti, Zi и Yi соответственно (1 ≤ Ti,
Yi ≤ 100, 1 ≤ Zi ≤ 1000).

Формат вывода
Выведите в первой строке число T - время, за которое будут надуты все шарики. Во
второй строке выведите N чисел - количество шариков, надутых каждым из приглашенных
помощников. Разделяйте числа пробелами. Если распределений шариков несколько, выведите
любое из них.

Пример 1
Ввод
Вывод
1 2
2 1 1
1 1 2

1
0 1

Пример 2
Ввод
Вывод
2 2
1 1 1
1 1 1

1
1 1
"""

# IN = 1
# REST = 0


def fun(s, M):
    """
    >>> fun([(2, 1, 1), (1, 1, 2)], 1)
    (1, [0, 1])
    >>> fun([(1, 1, 1), (1, 1, 1)], 2)
    (1, [1, 1])
    """

    if M == 0:
        return 0, [0] * len(s)

    MAX_TIME = float("inf")

    for t, z, y in s:
        time = M // z * (t * z + y) + M % z * t  # времени, чтобы надуть все шары
        MAX_TIME = min(MAX_TIME, time)

    # print(f"{MAX_TIME = }")
    events = []

    for person, (t, z, y) in enumerate(s):
        # генерируем времена надувания шаров
        time = t
        want_rest = 0
        while time <= MAX_TIME:

            if want_rest < z:
                events.append((time, person))  # это последний шар

                time += t
                want_rest += 1
            else:
                time += y
                want_rest = 0

    events.sort()

    # print(11111111)
    # print(*events, sep="\n")

    ans = [0] * len(s)
    number_balls = 0

    for time, person in events:
        number_balls += 1
        ans[person] += 1

        if number_balls == M:
            break

    return time, ans


M, N = map(int, input().split())  # M - шариков
s = [tuple(map(int, input().split())) for _ in range(N)]
ans = fun(s, M)
print(ans[0])
print(*ans[1])


# s = [[1, 1, 1], [2, 1, 1], [1, 2, 1], [1, 1, 2]]
# for M in range(10):
#     print(f"{M = }")
#     ans = fun(s, M)
#     print(ans[0])
#     print(*ans[1])

# M = 1
# ans = fun(s, M)
# print(ans[0])
# print(*ans[1])


# print(f"    >>> fun({s}, {M})")
# print(f"    {fun(s)}")


if __name__ == "__main__":
    import doctest

    doctest.testmod()
