"""
Дороги Нью-Манхэттена устроены следующим образом. С юга на север через каждые сто
метров проходит авеню, с запада на восток через каждые сто метров проходит улица.
Авеню и улицы нумеруются целыми числами. Меньшие номера соответствуют западным авеню
и южным улицам. Таким образом, можно построить прямоугольную систему координат так,
чтобы точка (x, y) лежала на пересечении x-ой авеню и y-ой улицы. Легко заметить,
что для того, чтобы в Нью-Манхэттене дойти от точки (x1, y1) до точки (x2, y2) нужно
пройти |x2 − x1| + |y2 − y1| кварталов. Эта величина называется манхэттенским расстоянием
между точками (x1, y1) и (x2, y2).
Миша живет в Нью-Манхэттене и каждое утро делает пробежку по городу. Он выбегает
из своего дома, который находится в точке (0, 0) и бежит по случайному маршруту.
Каждую минуту Миша либо остается на том же перекрестке, что и минуту назад, или
перемещается на один квартал в любом направлении. Чтобы не заблудиться Миша берет
с собой навигатор, который каждые t минут говорит Мише, в какой точке он находится.
К сожалению, навигатор показывает не точное положение Миши, он может показать любую
из точек, манхэттенское расстояние от которых до Миши не превышает d.
Через t × n минут от начала пробежки, получив n-е сообщение от навигатора, Миша
решил, что пора бежать домой. Для этого он хочет понять, в каких точках он может
находиться. Помогите Мише сделать это.

Формат ввода
Первая строка входного файла содержит числа t, d и n (1 ≤ t ≤ 100, 1 ≤ d ≤ 100,
1 ≤ n ≤ 100).
Далее n строк описывают данные, полученные от навигатора. Строка номер i содержит
числа xi и yi — данные, полученные от навигатора через ti минут от начала пробежки.

Формат вывода
В первой строке выходного файла выведите число m — число точек, в которых может
находиться Миша. Далее выведите m пар чисел — координаты точек. Точки можно вывести
в произвольном порядке.
Гарантируется, что навигатор исправен и что существует по крайней мере одна точка,
в которой может находиться Миша.

Пример 1
Ввод
Вывод
2 1 5
0 1
-2 1
-2 3
0 3
2 5

2
1 5
2 4

Пример 2
Ввод
Вывод
1 1 1
0 0

5
-1 0
0 -1
0 0
0 1
1 0

Пример 3
Ввод
Вывод
1 10 1
0 0

5
-1 0
0 -1
0 0
0 1
1 0
"""


def extend(x0, r):
    """
    a1 <= x - y <= a2
    b1 <= x + y <= b2
    """
    (a1, a2), (b1, b2) = x0

    a1 -= r
    a2 += r

    b1 -= r
    b2 += r

    return (a1, a2), (b1, b2)


def intersection(sq1, sq2):
    a1 = max(sq1[0][0], sq2[0][0])
    a2 = min(sq1[0][1], sq2[0][1])
    b1 = max(sq1[1][0], sq2[1][0])
    b2 = min(sq1[1][1], sq2[1][1])

    return (a1, a2), (b1, b2)


def square2points(sq):
    (a1, a2), (b1, b2) = sq

    # print(sq)
    # print((b1 - a2)//2, (b2 - a1)//2 + 1, (a1 + b1)//2, (a2 + b2)//2 + 1)

    ans = []
    for y in range((b1 - a2) // 2, (b2 - a1) // 2 + 1):
        for x in range((a1 + b1) // 2, (a2 + b2) // 2 + 1):
            if a1 <= x - y <= a2 and b1 <= x + y <= b2:
                ans.append((x, y))

    return ans


def square2points2(sq):
    (a1, a2), (b1, b2) = sq

    ans = []
    for a in range(a1, a2 + 1):
        for b in range(b1, b2 + 1):
            x, y = (a + b) % 2, (b - a) % 2
            if x == 0 and y == 0:
                x, y = (a + b) // 2, (b - a) // 2
                ans.append((x, y))

    return ans


def fun(t, d, s):
    """
    >>> fun(2, 1, [(0, 1), (-2, 1), (-2, 3), (0, 3), (2, 5)])
    [(1, 5), (2, 4)]
    >>> fun(1, 1, [(0, 0)])
    [(-1, 0), (0, -1), (0, 0), (0, 1), (1, 0)]
    >>> fun(1, 10, [(0, 0)])
    [(-1, 0), (0, -1), (0, 0), (0, 1), (1, 0)]
    """

    pos = (0, 0), (0, 0)

    for i in s:
        area_misha = extend(pos, t)

        x, y = i
        a = x - y
        b = x + y
        area_navigator = extend(((a, a), (b, b)), d)

        pos = intersection(area_misha, area_navigator)

    return sorted(square2points2(pos))


def manhattan_circle(R):
    for y in range(-R, R + 1):
        x_max = R - abs(y)
        for x in range(-x_max, x_max + 1):
            yield (x, y)


def add_shift(dots, shifts):
    ans = []

    for x0, y0 in shifts:
        for x, y in dots:
            ans.append((x + x0, y + y0))

    return set(ans)


def fun2(t, d, s):
    """
    ML - 21 test

    >>> fun2(2, 1, [(0, 1), (-2, 1), (-2, 3), (0, 3), (2, 5)])
    [(1, 5), (2, 4)]
    >>> fun2(1, 1, [(0, 0)])
    [(-1, 0), (0, -1), (0, 0), (0, 1), (1, 0)]
    >>> fun2(1, 10, [(0, 0)])
    [(-1, 0), (0, -1), (0, 0), (0, 1), (1, 0)]
    """

    pos = [(0, 0)]

    for i in s:
        manhattan_circle_misha = manhattan_circle(t)
        manhattan_circle_navigator = manhattan_circle(d)

        pos_misha = add_shift(pos, manhattan_circle_misha)
        pos_navigator = add_shift([i], manhattan_circle_navigator)
        pos = pos_misha & pos_navigator

    return sorted(pos)


t, d, n = map(int, input().split())
s = [tuple(map(int, input().split())) for _ in range(n)]
ans = fun(t, d, s)
print(len(ans))
for i in ans:
    print(*i)

# print(f">>> fun({t}, {d}, {s})")
# print(f"{fun(t, d, s)}")


if __name__ == "__main__":
    import doctest

    doctest.testmod()
